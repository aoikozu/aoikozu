diff --git a/node_modules/@mtripg6666tdr/m3u8stream/dist/index.js b/node_modules/@mtripg6666tdr/m3u8stream/dist/index.js
index c11f5fb..4dc3449 100644
--- a/node_modules/@mtripg6666tdr/m3u8stream/dist/index.js
+++ b/node_modules/@mtripg6666tdr/m3u8stream/dist/index.js
@@ -31,6 +31,7 @@ let m3u8stream = ((playlistURL, options = {}) => {
     const forwardEvents = (req) => {
         for (let event of ['abort', 'request', 'response', 'redirect', 'retry', 'reconnect']) {
             req.on(event, stream.emit.bind(stream, event));
+            if(event !== "request") req.on(event, () => console.log(event, "req:", req));
         }
     };
     let currSegment;
@@ -39,9 +40,17 @@ let m3u8stream = ((playlistURL, options = {}) => {
         // Count the size manually, since the `content-length` header is not
         // always there.
         let size = 0;
-        req.on('data', (chunk) => size += chunk.length);
+        req.on('data', (chunk) => {
+            size += chunk.length;
+            console.log("data", chunk.length, "readableLength", stream.readableLength, "upstream readableLength", stream._readableState?.pipes?.[0]?.readableLength);
+        });
         req.pipe(stream, { end: false });
-        req.on('end', () => callback(null, size));
+        const pipedAt = Date.now();
+        console.log("piped", req);
+        req.on('end', () => {
+            console.log("elapesed", Date.now() - pipedAt, "ms; req", req, "readableLength", stream.readableLength);
+            callback(null, size);
+        });
     }, { concurrency: 1 });
     let segmentNumber = 0;
     let downloaded = 0;
@@ -55,6 +64,7 @@ let m3u8stream = ((playlistURL, options = {}) => {
         let req = miniget_1.default(new URL(segment.url, playlistURL).toString(), reqOptions);
         req.on('error', callback);
         forwardEvents(req);
+        req.url = new URL(segment.url, playlistURL).toString();
         streamQueue.push(req, (_, size) => {
             downloaded += +size;
             stream.emit('progress', {
@@ -89,6 +99,7 @@ let m3u8stream = ((playlistURL, options = {}) => {
             let ms = Math.max(0, minRefreshTime - (Date.now() - lastRefresh));
             fetchingPlaylist = true;
             refreshTimeout = setTimeout(refreshPlaylist, ms);
+            console.log(`playlist fetching scheduled in ${ms}ms`);
         }
         else if ((ended || isStatic) &&
             !requestQueue.tasks.length && !requestQueue.active) {
@@ -165,15 +176,18 @@ let m3u8stream = ((playlistURL, options = {}) => {
     refreshPlaylist();
     stream.end = () => {
         ended = true;
-        streamQueue.die();
-        requestQueue.die();
+        //streamQueue.die();
+        //requestQueue.die();
         clearTimeout(refreshTimeout);
-        currPlaylist === null || currPlaylist === void 0 ? void 0 : currPlaylist.destroy();
-        currSegment === null || currSegment === void 0 ? void 0 : currSegment.destroy();
+        //currPlaylist === null || currPlaylist === void 0 ? void 0 : currPlaylist.destroy();
+        //currSegment === null || currSegment === void 0 ? void 0 : currSegment.destroy();
         stream_1.PassThrough.prototype.end.call(stream, null);
         return stream;
     };
     stream.updatePlaylist = (url) => playlistURL = url;
+    global.streamQueue = streamQueue;
+    global.requestQueue = requestQueue;
+    global.stream = stream;
     return stream;
 });
 m3u8stream.parseTimestamp = parse_time_1.humanStr;
